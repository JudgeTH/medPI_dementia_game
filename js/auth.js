/* ========================================
   Simple Authentication System for Elderly
   ======================================== */

class SimpleAuth {
    constructor() {
        this.storageKey = 'elderlyGame_user';
        this.currentUser = null;
        this.init();
    }

    init() {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        this.loadUser();
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÅ‡∏•‡πâ‡∏ß auto login
        if (this.currentUser) {
            this.autoLogin();
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Device ID ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
    generateDeviceId() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        ctx.textBaseline = 'top';
        ctx.font = '14px Arial';
        ctx.fillText('Device fingerprint', 2, 2);
        
        const fingerprint = canvas.toDataURL() + 
                          navigator.userAgent + 
                          screen.width + 
                          screen.height + 
                          new Date().getTimezoneOffset();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
        let hash = 0;
        for (let i = 0; i < fingerprint.length; i++) {
            const char = fingerprint.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        
        return Math.abs(hash).toString(36).substring(0, 8);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    checkDuplicateName(name) {
        const existingUsers = this.getAllUsers();
        const baseName = name.trim();
        const duplicates = existingUsers.filter(user => 
            user.displayName === baseName || 
            user.username.startsWith(baseName + '_')
        );
        
        if (duplicates.length === 0) {
            return baseName;
        }
        
        // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
        let counter = 1;
        let uniqueName;
        do {
            uniqueName = `${baseName}_${counter.toString().padStart(3, '0')}`;
            counter++;
        } while (existingUsers.some(user => user.username === uniqueName));
        
        return uniqueName;
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    getAllUsers() {
        const users = localStorage.getItem('elderlyGame_allUsers');
        return users ? JSON.parse(users) : [];
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    saveUser(user) {
        const allUsers = this.getAllUsers();
        allUsers.push(user);
        localStorage.setItem('elderlyGame_allUsers', JSON.stringify(allUsers));
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    createUser(displayName, gender) {
        const deviceId = this.generateDeviceId();
        const username = this.checkDuplicateName(displayName);
        
        const user = {
            id: Date.now().toString() + deviceId,
            username: username,
            displayName: displayName,
            gender: gender,
            deviceId: deviceId,
            character: this.generateCharacter(gender),
            stats: {
                totalGames: 0,
                totalStars: 0,
                bestScores: {
                    memory: 0,
                    pattern: 0,
                    attention: 0,
                    logic: 0
                },
                createdAt: new Date().toISOString(),
                lastLoginAt: new Date().toISOString()
            }
        };

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        this.saveUser(user);
        this.currentUser = user;
        this.saveCurrentUser();
        
        return user;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏®
    generateCharacter(gender) {
        const characters = {
            male: {
                emoji: 'üë¥',
                skinColor: '#FDBCB4',
                hairColor: '#CCCCCC',
                clothes: {
                    shirt: 'üëï',
                    color: '#4CAF50'
                }
            },
            female: {
                emoji: 'üëµ',
                skinColor: '#FDBCB4', 
                hairColor: '#CCCCCC',
                clothes: {
                    shirt: 'üëö',
                    color: '#E91E63'
                }
            }
        };

        return characters[gender] || characters.male;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    saveCurrentUser() {
        if (this.currentUser) {
            localStorage.setItem(this.storageKey, JSON.stringify(this.currentUser));
        }
    }

    // ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    loadUser() {
        const userData = localStorage.getItem(this.storageKey);
        if (userData) {
            this.currentUser = JSON.parse(userData);
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó last login
            this.currentUser.stats.lastLoginAt = new Date().toISOString();
            this.saveCurrentUser();
        }
    }

    // Auto login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤
    autoLogin() {
        if (this.currentUser) {
            console.log(`Auto login: ${this.currentUser.displayName}`);
            
            // ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ dashboard
            document.getElementById('login-page').classList.remove('active');
            document.getElementById('dashboard-page').classList.add('active');
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ dashboard
            this.updateDashboard();
            
            return true;
        }
        return false;
    }

    // Login ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏¢‡πÜ
    login(name, gender = null) {
        const trimmedName = name.trim();
        
        if (trimmedName.length < 2) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)');
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤ (‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞ device ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
        const deviceId = this.generateDeviceId();
        const existingUser = this.findExistingUser(trimmedName, deviceId);
        
        if (existingUser) {
            this.currentUser = existingUser;
            this.currentUser.stats.lastLoginAt = new Date().toISOString();
            this.saveCurrentUser();
            return { isNew: false, user: this.currentUser };
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
        if (!gender) {
            return { isNew: true, needGender: true };
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
        const newUser = this.createUser(trimmedName, gender);
        return { isNew: true, user: newUser };
    }

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    findExistingUser(displayName, deviceId) {
        const allUsers = this.getAllUsers();
        return allUsers.find(user => 
            user.displayName === displayName && 
            user.deviceId === deviceId
        );
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ dashboard
    updateDashboard() {
        if (!this.currentUser) return;

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        const displayNameEl = document.getElementById('display-name');
        if (displayNameEl) {
            displayNameEl.textContent = this.currentUser.displayName;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß
        const totalStarsEl = document.getElementById('total-stars');
        if (totalStarsEl) {
            totalStarsEl.textContent = this.currentUser.stats.totalStars;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        const characterAvatars = document.querySelectorAll('.character-avatar');
        characterAvatars.forEach(avatar => {
            avatar.textContent = this.currentUser.character.emoji;
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        const todayGamesEl = document.getElementById('today-games');
        const avgScoreEl = document.getElementById('avg-score');
        
        if (todayGamesEl) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
            todayGamesEl.textContent = '0';
        }

        if (avgScoreEl) {
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            const scores = Object.values(this.currentUser.stats.bestScores);
            const avgScore = scores.length > 0 ? 
                Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 0;
            avgScoreEl.textContent = avgScore + '%';
        }
    }

    // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    logout() {
        this.currentUser = null;
        localStorage.removeItem(this.storageKey);
        
        // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
        document.getElementById('dashboard-page').classList.remove('active');
        document.getElementById('login-page').classList.add('active');
        
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå form
        document.getElementById('player-name').value = '';
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    getCurrentUser() {
        return this.currentUser;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß
    updateScore(gameType, score, stars) {
        if (!this.currentUser) return;

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        if (score > this.currentUser.stats.bestScores[gameType]) {
            this.currentUser.stats.bestScores[gameType] = score;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß
        this.currentUser.stats.totalStars += stars;
        this.currentUser.stats.totalGames += 1;

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.saveCurrentUser();
        this.updateDashboard();
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö auth
window.gameAuth = new SimpleAuth();
