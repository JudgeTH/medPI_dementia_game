/* ========================================
   Main App Controller - Final Fixed Version
   ======================================== */

class GameApp {
    constructor() {
        this.currentPage = 'login';
        this.currentView = 'main';
        this.isFirstTime = false;
        this.pendingName = null;
        
        this.init();
    }

    init() {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }

    setup() {
        console.log('üéÆ Starting Elderly Cognitive Game...');
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
        this.setupEventListeners();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const currentUser = window.gameAuth ? window.gameAuth.getCurrentUser() : null;
        if (currentUser) {
            console.log(`üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${currentUser.displayName}`);
            this.showDashboard();
        } else {
            console.log('üÜï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠');
        }
    }

    setupEventListeners() {
        // Login Form
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // Action Buttons
        this.setupActionButtons();

        // Dynamic Event Listeners
        this.setupDynamicListeners();
    }

    setupActionButtons() {
        // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        setTimeout(() => {
            const shopBtn = document.getElementById('open-shop');
            if (shopBtn) {
                shopBtn.addEventListener('click', () => this.showShop());
            }

            const gamesBtn = document.getElementById('open-games');
            if (gamesBtn) {
                gamesBtn.addEventListener('click', () => this.showGamesMenu());
            }

            const statsBtn = document.getElementById('view-stats');
            if (statsBtn) {
                statsBtn.addEventListener('click', () => this.showStats());
            }

            const customizeBtn = document.getElementById('customize-character');
            if (customizeBtn) {
                customizeBtn.addEventListener('click', () => this.showCustomization());
            }
        }, 100);
    }

    setupDynamicListeners() {
        // Event delegation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        document.addEventListener('click', (e) => {
            try {
                // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
                if (e.target.closest('.gender-select-btn')) {
                    this.handleGenderSelect(e);
                    return;
                }
                
                // ‡∏õ‡∏∏‡πà‡∏° logout
                if (e.target.matches('.logout-btn')) {
                    this.handleLogout();
                    return;
                }
                
                // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
                if (e.target.matches('.back-btn')) {
                    this.goBack();
                    return;
                }

                // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                if (e.target.matches('.back-to-main')) {
                    this.showMainView();
                    return;
                }

                // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏°
                if (e.target.closest('.game-card')) {
                    this.handleGameSelect(e);
                    return;
                }
            } catch (error) {
                console.error('Event handling error:', error);
            }
        });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ Login
    handleLogin(e) {
        e.preventDefault();
        
        const nameInput = document.getElementById('player-name');
        if (!nameInput) {
            this.showMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠', 'error');
            return;
        }

        const name = nameInput.value.trim();
        
        if (name.length < 2) {
            this.showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)', 'error');
            return;
        }

        try {
            this.showLoading(true);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ gameAuth ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if (!window.gameAuth) {
                throw new Error('‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            }
            
            // ‡∏•‡∏≠‡∏á login
            const result = window.gameAuth.login(name);
            
            if (!result) {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ');
            }
            
            if (result.needGender) {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
                this.pendingName = name;
                this.showGenderSelection();
            } else if (result.isNew && result.user) {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡πÅ‡∏•‡πâ‡∏ß
                this.showMessage(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${result.user.displayName}! üéâ`, 'success');
                this.navigateToDashboard();
            } else if (result.user) {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤
                this.showMessage(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö ${result.user.displayName}! üëã`, 'success');
                this.navigateToDashboard();
            } else {
                throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
        } catch (error) {
            console.error('Login error:', error);
            this.showMessage(error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    showGenderSelection() {
        const loginCard = document.querySelector('.welcome-card');
        if (!loginCard) {
            this.showMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login', 'error');
            return;
        }
        
        loginCard.innerHTML = `
            <div class="character-preview">
                <div class="character-simple">ü§î</div>
            </div>
            
            <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
            <p>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
            
            <div class="gender-selection">
                <button type="button" class="gender-select-btn male" data-gender="male">
                    <div class="gender-icon">üë¥</div>
                    <span>‡∏ä‡∏≤‡∏¢</span>
                </button>
                
                <button type="button" class="gender-select-btn female" data-gender="female">
                    <div class="gender-icon">üëµ</div>
                    <span>‡∏´‡∏ç‡∏¥‡∏á</span>
                </button>
            </div>
            
            <button type="button" class="btn btn-secondary back-btn">
                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠
            </button>
        `;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
        this.addGenderSelectionStyles();
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏® - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    handleGenderSelect(e) {
        try {
            console.log('Gender select clicked');
            
            const button = e.target.closest('.gender-select-btn');
            if (!button) {
                console.log('Button not found');
                return;
            }

            const gender = button.getAttribute('data-gender') || button.dataset.gender;
            console.log('Selected gender:', gender);
            
            if (!this.pendingName) {
                console.log('No pending name');
                this.showMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ', 'error');
                return;
            }

            if (!gender) {
                console.log('No gender selected');
                this.showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®', 'error');
                return;
            }

            this.showLoading(true);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ gameAuth ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            if (!window.gameAuth) {
                throw new Error('‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
            }
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏®
            const result = window.gameAuth.login(this.pendingName, gender);
            console.log('Login result:', result);
            
            if (result && result.user) {
                this.showMessage(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${result.user.displayName} üéâ`, 'success');
                this.pendingName = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô navigate
                this.navigateToDashboard();
            } else {
                throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÑ‡∏î‡πâ');
            }
        } catch (error) {
            console.error('Gender selection error:', error);
            this.showMessage(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®', 'error');
        } finally {
            this.showLoading(false);
        }
    }

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
    navigateToDashboard() {
        setTimeout(() => {
            const loginPage = document.getElementById('login-page');
            const dashboardPage = document.getElementById('dashboard-page');
            
            if (loginPage && dashboardPage) {
                loginPage.classList.remove('active');
                dashboardPage.classList.add('active');
                this.currentPage = 'dashboard';
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                this.showDashboard();
            } else {
                this.showMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Dashboard', 'error');
            }
        }, 1000);
    }

    // ‡πÅ‡∏™‡∏î‡∏á Dashboard
    showDashboard() {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ dashboard
        if (window.gameAuth) {
            window.gameAuth.updateDashboard();
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        this.setupCharacterDisplay();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        this.showMainView();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Action Buttons ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        setTimeout(() => {
            this.setupActionButtons();
        }, 500);
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    setupCharacterDisplay() {
        const characterArea = document.getElementById('character-display-area');
        if (!characterArea) {
            console.log('Character display area not found');
            return;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        if (window.characterSystem) {
            try {
                const characterContainer = window.characterSystem.setupCharacterContainer();
                characterArea.innerHTML = '';
                characterArea.appendChild(characterContainer);
                
                // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
                const user = window.gameAuth ? window.gameAuth.getCurrentUser() : null;
                if (user) {
                    window.characterSystem.loadCharacter(user);
                }
            } catch (error) {
                console.error('Character setup error:', error);
                characterArea.innerHTML = '<div style="text-align: center; padding: 40px;"><h3>‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î... üë¥</h3></div>';
            }
        } else {
            console.log('Character system not available');
            characterArea.innerHTML = '<div style="text-align: center; padding: 40px;"><h3>‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î... üë¥</h3></div>';
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    showMainView() {
        this.currentView = 'main';
        
        const actionButtons = document.querySelector('.action-buttons');
        const gamesSelection = document.getElementById('games-selection');
        const shopSection = document.getElementById('shop-section');
        
        if (actionButtons) actionButtons.style.display = 'block';
        if (gamesSelection) gamesSelection.style.display = 'none';
        if (shopSection) shopSection.style.display = 'none';
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏°
    showGamesMenu() {
        this.currentView = 'games';
        
        const actionButtons = document.querySelector('.action-buttons');
        const gamesSelection = document.getElementById('games-selection');
        const shopSection = document.getElementById('shop-section');
        
        if (actionButtons) actionButtons.style.display = 'none';
        if (shopSection) shopSection.style.display = 'none';
        if (gamesSelection) gamesSelection.style.display = 'block';
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
    showShop() {
        this.currentView = 'shop';
        
        const actionButtons = document.querySelector('.action-buttons');
        const gamesSelection = document.getElementById('games-selection');
        const shopSection = document.getElementById('shop-section');
        
        if (actionButtons) actionButtons.style.display = 'none';
        if (gamesSelection) gamesSelection.style.display = 'none';
        if (shopSection) shopSection.style.display = 'block';
        
        this.showMessage('‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... üõí', 'info');
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    showStats() {
        this.showMessage('‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... üìä', 'info');
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
    showCustomization() {
        this.showMessage('‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... ‚ú®', 'info');
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°
    handleGameSelect(e) {
        try {
            const gameCard = e.target.closest('.game-card');
            const gameType = gameCard ? gameCard.getAttribute('data-game') || gameCard.dataset.game : null;
            
            if (!gameType) return;

            this.showMessage(`‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°: ${this.getGameName(gameType)}`, 'info');
            
            setTimeout(() => {
                this.startGame(gameType);
            }, 1000);
        } catch (error) {
            console.error('Game select error:', error);
        }
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
   startGame(gameType) {
       // ‡∏Å‡∏£‡∏ì‡∏µ "‡πÄ‡∏Å‡∏°‡∏à‡∏≥‡∏†‡∏≤‡∏û" ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /pages/game.html
       if (gameType === 'memory') {
           // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ multi-page ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ router) ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
           window.location.href = '/pages/game.html';
           return;
       }
      // ‡∏Å‡∏£‡∏ì‡∏µ "‡πÄ‡∏Å‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡πá‡∏ß" ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /pages/game-addition.html
       if (gameType === 'addition') {
           // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ multi-page ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ router) ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
           window.location.href = '/pages/game-addition.html';
           return;
       }
      // ‡∏Å‡∏£‡∏ì‡∏µ "‡∏à‡∏≥‡∏•‡∏≥‡∏î‡∏±‡∏ö" ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /pages/game-addition.html
       if (gameType === 'pattern') {
           // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ multi-page ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ router) ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
           window.location.href = '/pages/game-pattern.html';
           return;
       }
       // ‡∏Å‡∏£‡∏ì‡∏µ "‡∏ï‡∏£‡∏£‡∏Å‡∏∞" ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ /pages/game-addition.html
       if (gameType === 'logic') {
           // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ multi-page ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ router) ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
           window.location.href = '/pages/game-logic.html';
           return;
       }
       // ‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
       this.showMessage(`‡πÄ‡∏Å‡∏° ${this.getGameName(gameType)} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... üöß`, 'info');
       console.log(`Starting game:`, gameType);
   }

    // ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    getGameName(gameType) {
        const gameNames = {
            memory: '‡∏à‡∏≥‡∏†‡∏≤‡∏û',
            pattern: '‡∏à‡∏≥‡∏•‡∏≥‡∏î‡∏±‡∏ö', 
            addition: '‡∏Ñ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡πá‡∏ß',
            logic: '‡∏ï‡∏£‡∏£‡∏Å‡∏∞'
        };
        return gameNames[gameType] || gameType;
    }

    // Logout
    handleLogout() {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            if (window.gameAuth) {
                window.gameAuth.logout();
            }
            this.currentPage = 'login';
            this.showMessage('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        }
    }

    // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    goBack() {
        if (this.currentPage === 'login') {
            this.resetLoginForm();
        } else if (this.currentView !== 'main') {
            this.showMainView();
        }
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï login form
    resetLoginForm() {
        const loginCard = document.querySelector('.welcome-card');
        if (!loginCard) return;
        
        loginCard.innerHTML = `
            <div class="character-preview">
                <div class="character-simple">üëµ</div>
            </div>
            
            <h2>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!</h2>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</p>
            
            <form id="login-form">
                <div class="input-group">
                    <label for="player-name">‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</label>
                    <input 
                        type="text" 
                        id="player-name" 
                        name="playerName" 
                        placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                        required
                        minlength="2"
                        maxlength="20"
                    >
                </div>
                
                <button type="submit" class="btn btn-primary btn-large">
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
                </button>
            </form>
        `;
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listener ‡πÉ‡∏´‡∏°‡πà
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoading(show) {
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            if (show) {
                loadingOverlay.classList.add('active');
            } else {
                loadingOverlay.classList.remove('active');
            }
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    showMessage(message, type = 'info') {
        console.log(`${type.toUpperCase()}: ${message}`);
        
        const colors = {
            error: '#f44336',
            success: '#4caf50',
            info: '#2196f3',
            warning: '#ff9800'
        };
        
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${colors[type] || colors.info};
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            font-size: 18px;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
            word-wrap: break-word;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    addGenderSelectionStyles() {
        if (document.getElementById('gender-selection-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'gender-selection-styles';
        style.textContent = `
            .gender-selection {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin: 30px 0;
            }
            
            .gender-select-btn {
                background: white;
                border: 3px solid #e0e0e0;
                border-radius: 12px;
                padding: 24px 16px;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 12px;
                min-height: 120px;
                font-size: 18px;
                font-weight: 500;
                color: #333;
            }
            
            .gender-select-btn:hover {
                border-color: #4CAF50;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(76, 175, 80, 0.2);
            }
            
            .gender-icon {
                font-size: 3rem;
                line-height: 1;
            }
        `;
        
        document.head.appendChild(style);
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û
document.addEventListener('DOMContentLoaded', () => {
    window.gameApp = new GameApp();
});

/* =========================================================
   üîí Safe Shop Linker (append-only)
   - Non-destructive: ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°, ‡πÅ‡∏Ñ‡πà‡∏≠‡∏±‡∏û‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
   - ‡πÉ‡∏ä‡πâ openShop() ‡∏´‡∏£‡∏∑‡∏≠ App.openShop ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
   - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö trigger ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö: #open-shop, #btnShop, [data-nav="shop"],
     ‡πÅ‡∏•‡∏∞ <a href=".../pages/shop.html">
   ========================================================= */
(function ShopLinkerSafe() {
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ú‡∏•‡∏≠‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
  if (window.__SHOP_LINKER_ATTACHED__) return;
  window.__SHOP_LINKER_ATTACHED__ = true;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
  function goShop(opts) {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å -> ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
      if (window.App && typeof window.App.openShop === 'function') {
        window.App.openShop(Object.assign({ tab: 'featured', returnTo: location.pathname }, opts || {}));
        return;
      }
      if (typeof window.openShop === 'function') {
        window.openShop(Object.assign({ tab: 'featured', returnTo: location.pathname }, opts || {}));
        return;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡πÄ‡∏•‡∏¢ ‚Üí ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ shop.html ‡∏ï‡∏£‡∏á ‡πÜ
      var candidates = [
        '/pages/shop.html',
        './pages/shop.html',
        'pages/shop.html'
      ];
      var link = candidates[0];
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà subpath (‡πÄ‡∏ä‡πà‡∏ô /app/‚Ä¶)
      try {
        var base = document.querySelector('base[href]')?.getAttribute('href') || '';
        if (base && base !== '/' && !base.startsWith('http')) {
          link = base.replace(/\/+$/,'') + '/pages/shop.html';
        }
      } catch(_) {}
      location.href = link;
    } catch (err) {
      console.warn('[ShopLinker] fallback to /pages/shop.html due to error:', err);
      location.href = '/pages/shop.html';
    }
  }

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á listener ‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á
  function attachShopListeners() {
    // 1) ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î/‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏≤‡∏° id ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢
    var ids = ['open-shop', 'btnShop'];
    ids.forEach(function(id) {
      var el = document.getElementById(id);
      if (el && !el.__shopLinked) {
        el.addEventListener('click', function(e) {
          e.preventDefault();
          goShop();
        });
        el.__shopLinked = true;
      }
    });

    // 2) Event delegation: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö data-attr / ‡∏•‡∏¥‡∏á‡∏Å‡πå shop.html
    document.addEventListener('click', function(e) {
      // ‡∏´‡∏≤ element ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô trigger ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      var trigger = e.target.closest('[data-nav="shop"], #open-shop, #btnShop, a[href*="pages/shop.html"]');
      if (!trigger) return;
      // ‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      if (trigger.__shopLinkedHandled) return;
      trigger.__shopLinkedHandled = true;

      // ‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û behavior ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô <a target="_blank">
      if (trigger.tagName === 'A' && trigger.getAttribute('target') === '_blank') return;

      e.preventDefault();
      goShop();
      // ‡∏¢‡πâ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ handled ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
      setTimeout(function(){ trigger.__shopLinkedHandled = false; }, 0);
    }, { capture: true }); // ‡πÉ‡∏ä‡πâ capture ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏´‡∏ô‡πâ‡∏≤ handler ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î
  }

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', attachShopListeners);
  } else {
    attachShopListeners();
  }

  // ‡πÄ‡∏ú‡∏¢ util ‡πÄ‡∏•‡πá‡∏Å ‡πÜ (‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
  window.App = Object.assign(window.App || {}, {
    __goShopSafe: goShop
  });
})();
