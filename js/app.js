/* ========================================
   Main App Controller for Elderly Cognitive Game
   ======================================== */

class GameApp {
    constructor() {
        this.currentPage = 'login';
        this.isFirstTime = false;
        this.pendingName = null;
        
        this.init();
    }

    init() {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            this.setup();
        }
    }

    setup() {
        console.log('üéÆ Starting Elderly Cognitive Game...');
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
        this.setupEventListeners();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        // ‡∏£‡∏∞‡∏ö‡∏ö auth ‡∏à‡∏∞ auto login ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user ‡πÄ‡∏Å‡πà‡∏≤
        const currentUser = window.gameAuth.getCurrentUser();
        if (currentUser) {
            console.log(`üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö: ${currentUser.displayName}`);
        } else {
            console.log('üÜï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠');
        }
    }

    setupEventListeners() {
        // Login Form
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        // Game Cards ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Dashboard
        const gameCards = document.querySelectorAll('.game-card');
        gameCards.forEach(card => {
            card.addEventListener('click', (e) => this.handleGameSelect(e));
        });

        // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
        const customizeBtn = document.getElementById('customize-character');
        if (customizeBtn) {
            customizeBtn.addEventListener('click', () => this.openCharacterCustomization());
        }

        // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        this.setupDynamicListeners();
    }

    setupDynamicListeners() {
        // Event delegation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        document.addEventListener('click', (e) => {
            if (e.target.matches('.gender-select-btn')) {
                this.handleGenderSelect(e);
            }
            
            if (e.target.matches('.logout-btn')) {
                this.handleLogout();
            }
            
            if (e.target.matches('.back-btn')) {
                this.goBack();
            }
        });
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£ Login
    handleLogin(e) {
        e.preventDefault();
        
        const nameInput = document.getElementById('player-name');
        const name = nameInput.value.trim();
        
        if (name.length < 2) {
            this.showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)', 'error');
            return;
        }

        try {
            this.showLoading(true);
            
            // ‡∏•‡∏≠‡∏á login
            const result = window.gameAuth.login(name);
            
            if (result.needGender) {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
                this.pendingName = name;
                this.showGenderSelection();
            } else if (result.isNew) {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡πÅ‡∏•‡πâ‡∏ß
                this.showMessage(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${result.user.displayName}! üéâ`, 'success');
                this.navigateToDashboard();
            } else {
                // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤
                this.showMessage(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö ${result.user.displayName}! üëã`, 'success');
                this.navigateToDashboard();
            }
        } catch (error) {
            this.showMessage(error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    showGenderSelection() {
        const loginCard = document.querySelector('.welcome-card');
        
        loginCard.innerHTML = `
            <div class="character-preview">
                <div class="character-simple">ü§î</div>
            </div>
            
            <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
            <p>‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°</p>
            
            <div class="gender-selection">
                <button type="button" class="gender-select-btn male" data-gender="male">
                    <div class="gender-icon">üë¥</div>
                    <span>‡∏ä‡∏≤‡∏¢</span>
                </button>
                
                <button type="button" class="gender-select-btn female" data-gender="female">
                    <div class="gender-icon">üëµ</div>
                    <span>‡∏´‡∏ç‡∏¥‡∏á</span>
                </button>
            </div>
            
            <button type="button" class="btn btn-secondary back-btn">
                ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠
            </button>
        `;

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
        this.addGenderSelectionStyles();
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    handleGenderSelect(e) {
        const gender = e.currentTarget.dataset.gender;
        
        if (!this.pendingName || !gender) return;

        try {
            this.showLoading(true);
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏®
            const result = window.gameAuth.login(this.pendingName, gender);
            
            if (result.user) {
                this.showMessage(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${result.user.displayName} üéâ`, 'success');
                this.navigateToDashboard();
            }
        } catch (error) {
            this.showMessage(error.message, 'error');
        } finally {
            this.pendingName = null;
            this.showLoading(false);
        }
    }

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Dashboard
    navigateToDashboard() {
        setTimeout(() => {
            document.getElementById('login-page').classList.remove('active');
            document.getElementById('dashboard-page').classList.add('active');
            this.currentPage = 'dashboard';
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ dashboard
            window.gameAuth.updateDashboard();
        }, 1000);
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°
    handleGameSelect(e) {
        const gameType = e.currentTarget.dataset.game;
        
        if (!gameType) return;

        this.showMessage(`‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°: ${this.getGameName(gameType)}`, 'info');
        
        // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
        setTimeout(() => {
            this.startGame(gameType);
        }, 1000);
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏° (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô placeholder)
    startGame(gameType) {
        this.showMessage(`‡πÄ‡∏Å‡∏° ${this.getGameName(gameType)} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... üöß`, 'info');
        
        // TODO: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏£‡∏¥‡∏á
        console.log(`Starting game: ${gameType}`);
    }

    // ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    getGameName(gameType) {
        const gameNames = {
            memory: '‡∏à‡∏≥‡∏†‡∏≤‡∏û',
            pattern: '‡∏à‡∏≥‡∏•‡∏≥‡∏î‡∏±‡∏ö', 
            attention: '‡∏™‡∏°‡∏≤‡∏ò‡∏¥',
            logic: '‡∏ï‡∏£‡∏£‡∏Å‡∏∞'
        };
        return gameNames[gameType] || gameType;
    }

    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    openCharacterCustomization() {
        this.showMessage('‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤... üëó', 'info');
        
        // TODO: ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
    }

    // Logout
    handleLogout() {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            window.gameAuth.logout();
            this.currentPage = 'login';
            this.showMessage('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        }
    }

    // ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    goBack() {
        if (this.currentPage === 'login') {
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï login form
            const loginCard = document.querySelector('.welcome-card');
            loginCard.innerHTML = `
                <div class="character-preview">
                    <div class="character-simple">üëµ</div>
                </div>
                
                <h2>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!</h2>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</p>
                
                <form id="login-form">
                    <div class="input-group">
                        <label for="player-name">‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</label>
                        <input 
                            type="text" 
                            id="player-name" 
                            name="playerName" 
                            placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..."
                            required
                            minlength="2"
                            maxlength="20"
                        >
                    </div>
                    
                    <button type="submit" class="btn btn-primary btn-large">
                        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
                    </button>
                </form>
            `;
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listener ‡πÉ‡∏´‡∏°‡πà
            const loginForm = document.getElementById('login-form');
            if (loginForm) {
                loginForm.addEventListener('submit', (e) => this.handleLogin(e));
            }
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á Loading
    showLoading(show) {
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            if (show) {
                loadingOverlay.classList.add('active');
            } else {
                loadingOverlay.classList.remove('active');
            }
        }
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    showMessage(message, type = 'info') {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á toast notification ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS inline
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'};
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            font-size: 18px;
            font-weight: 500;
            z-index: 10000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 400px;
            word-wrap: break-word;
        `;
        
        document.body.appendChild(toast);
        
        // ‡πÅ‡∏™‡∏î‡∏á toast
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);
        
        // ‡∏ã‡πà‡∏≠‡∏ô toast
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    addGenderSelectionStyles() {
        if (document.getElementById('gender-selection-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'gender-selection-styles';
        style.textContent = `
            .gender-selection {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin: 30px 0;
            }
            
            .gender-select-btn {
                background: white;
                border: 3px solid #e0e0e0;
                border-radius: 12px;
                padding: 24px 16px;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 12px;
                min-height: 120px;
                font-size: 18px;
                font-weight: 500;
                color: #333;
            }
            
            .gender-select-btn:hover {
                border-color: #4CAF50;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(76, 175, 80, 0.2);
            }
            
            .gender-select-btn:active {
                transform: translateY(0);
            }
            
            .gender-icon {
                font-size: 3rem;
                line-height: 1;
            }
            
            .gender-select-btn.male:hover {
                border-color: #2196F3;
                box-shadow: 0 4px 12px rgba(33, 150, 243, 0.2);
            }
            
            .gender-select-btn.female:hover {
                border-color: #E91E63;
                box-shadow: 0 4px 12px rgba(233, 30, 99, 0.2);
            }
        `;
        
        document.head.appendChild(style);
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û
window.gameApp = new GameApp();
