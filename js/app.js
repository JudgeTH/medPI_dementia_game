/* =========================================================
   app.js ‚Äî Simple Avatar (single-image) + Coins + Shop-ready
   - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ ES Modules (no import/export)
   - ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (fallback ‡πÄ‡∏õ‡πá‡∏ô base ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤)
   - ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÉ‡∏ï‡πâ‡∏ä‡∏∑‡πà‡∏≠ (ledger ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
   - ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ß‡∏ô‡∏ó‡∏≠‡∏£‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "avatars" (‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ)
   - ‡πÑ‡∏°‡πà‡∏¢‡∏∏‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°"
   ========================================================= */

(function () {
  /* ---------------- Config & Utils ---------------- */
  const KEYS = {
    uid: 'current_uid',
    name: 'player_name',
    coins: 'player_coins',
    ledger: (uid) => `stars_ledger:${uid}`,
    avatarId: 'avatar_id',
    avatarAsset: 'avatar_asset',
    avatarsOwned: 'avatars_owned', // array of avatar ids
  };

  // ‡∏û‡∏≤‡∏ò‡∏£‡∏π‡∏õ base ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  const AVATAR_DEFAULTS = [
    {
      id: 'elderly_male_base',
      name: '‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏ß‡∏±‡∏¢',
      asset: '/assets/images/characters/base/elderly_male_base.png',
      price: 0
    },
    {
      id: 'elderly_female_base',
      name: '‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏™‡∏π‡∏á‡∏ß‡∏±‡∏¢',
      asset: '/assets/images/characters/base/elderly_female_base.png',
      price: 0
    }
  ];

  const $ = (s, r = document) => r.querySelector(s);
  const nowISO = () => new Date().toISOString();
  const toInt = (v, d=0) => (Number.isFinite(+v) ? +v : d);

  const store = {
    get(k, d=null){ try{ const r=localStorage.getItem(k); if(r===null)return d; return /^\[|\{/.test(r)?JSON.parse(r):r; }catch{return d;} },
    set(k,v){ try{ localStorage.setItem(k, typeof v==='object'?JSON.stringify(v):String(v)); }catch{} },
    del(k){ try{ localStorage.removeItem(k);}catch{} }
  };

  /* ---------------- Economy (ledger ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢) ---------------- */
  const economy = {
    uid(){ return store.get(KEYS.uid) || 'guest'; },
    _ledger(uid=this.uid()){ return store.get(KEYS.ledger(uid), []); },
    _saveLedger(arr, uid=this.uid()){ store.set(KEYS.ledger(uid), arr); },
    async balance(uid=this.uid()){
      const L = this._ledger(uid);
      if (!L.length) return toInt(store.get(KEYS.coins, 0));
      return L.reduce((s,r)=>s+(r.delta||0),0);
    },
    async add(delta, reason='reward', uid=this.uid()){
      if (!delta) return this.balance(uid);
      const L = this._ledger(uid);
      L.push({ id:`${Date.now()}-${Math.random().toString(36).slice(2)}`, at:nowISO(), delta:+delta, reason });
      this._saveLedger(L, uid);
      const bal = await this.balance(uid);
      store.set(KEYS.coins, bal); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ô‡∏µ‡πâ
      document.dispatchEvent(new Event('coins:changed'));
      return bal;
    },
    async spend(cost, reason='purchase', uid=this.uid()){
      cost = Math.abs(toInt(cost,0));
      const bal = await this.balance(uid);
      if (bal < cost) throw new Error('‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠');
      return this.add(-cost, reason, uid);
    }
  };

  /* ---------------- Avatar (single-image) ---------------- */
  const avatar = {
    // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà ‚Äú‡∏£‡πâ‡∏≤‡∏ô‚Äù ‡∏à‡∏∞‡πÉ‡∏ä‡πâ (‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å /data/avatars.json ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡πÉ‡∏ä‡πâ AVATAR_DEFAULTS)
    async listAll(){
      try{
        const res = await fetch('/data/avatars.json', {cache:'no-store'});
        if (res.ok) return await res.json();
      }catch(e){}
      return AVATAR_DEFAULTS;
    },
    owned(){
      return store.get(KEYS.avatarsOwned, []) || [];
    },
    _saveOwned(arr){
      store.set(KEYS.avatarsOwned, arr);
    },
    ensureOwnBase(){
      const own = new Set(this.owned());
      AVATAR_DEFAULTS.forEach(a => own.add(a.id));
      this._saveOwned(Array.from(own));
    },
    current(){
      return {
        id: store.get(KEYS.avatarId) || AVATAR_DEFAULTS[0].id,
        asset: store.get(KEYS.avatarAsset) || AVATAR_DEFAULTS[0].asset
      };
    },
    setCurrent({id, asset}){
      if (id) store.set(KEYS.avatarId, id);
      if (asset) store.set(KEYS.avatarAsset, asset);
      this.render();
    },
    async buyAndEquip(avatarObj){
      const own = new Set(this.owned());
      if (!own.has(avatarObj.id)){
        if (avatarObj.price && avatarObj.price>0){
          await economy.spend(avatarObj.price, `purchase:avatar:${avatarObj.id}`);
        }
        own.add(avatarObj.id);
        this._saveOwned(Array.from(own));
      }
      this.setCurrent({id: avatarObj.id, asset: avatarObj.asset});
      document.dispatchEvent(new Event('inventory:changed'));
      document.dispatchEvent(new Event('coins:changed'));
    },
    render(){
      const area = $('#character-display-area');
      if (!area) return;
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï img ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      let img = area.querySelector('img.avatar-img');
      if (!img){
        area.innerHTML = ''; // ‡∏•‡πâ‡∏≤‡∏á loader ‡πÄ‡∏î‡∏¥‡∏°
        img = document.createElement('img');
        img.className = 'avatar-img';
        img.alt = 'avatar';
        img.style.maxWidth = '260px';
        img.style.maxHeight = '360px';
        img.style.objectFit = 'contain';
        img.style.borderRadius = '18px';
        img.style.boxShadow = '0 6px 24px rgba(0,0,0,.08)';
        area.appendChild(img);
      }
      const cur = this.current();
      img.onerror = () => {
        // ‡∏´‡∏≤‡∏Å‡∏û‡∏≤‡∏ò‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á base ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
        const fallback = AVATAR_DEFAULTS[0];
        img.src = fallback.asset;
        this.setCurrent({id:fallback.id, asset:fallback.asset});
      };
      img.src = cur.asset;
    }
  };

  /* ---------------- Header (‡∏ä‡∏∑‡πà‡∏≠ + ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç) ---------------- */
  const headerUI = {
    ensureCoinsInline(){
      if (!document.getElementById('header-coins')){
        const host = $('.name-and-coins') || $('.header') || document.body;
        const div = document.createElement('div');
        div.className = 'player-coins-inline';
        div.innerHTML = `<span class="coin-icon">‚≠ê</span> <span id="header-coins">0</span> ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç`;
        host.appendChild(div);
      }
    },
    refreshName(){
      const el = document.getElementById('display-name');
      if (el) el.textContent = store.get(KEYS.name) || '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô';
    },
    async refreshCoins(){
      const el = document.getElementById('header-coins');
      if (el) el.textContent = await economy.balance();
    },
    init(){
      document.addEventListener('coins:changed', this.refreshCoins);
      document.addEventListener('DOMContentLoaded', () => {
        this.ensureCoinsInline();
        this.refreshName();
        this.refreshCoins();
      });
    }
  };

  /* ---------------- Play Game (‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î) ---------------- */
  function ensurePlayGameCard() {
    if (document.getElementById('open-games')) return;
    const grid = document.querySelector('.actions-grid, .action-grid, .actions, #action-cards, main .container');
    if (!grid) return;
    const btn = document.createElement('button');
    btn.id = 'open-games';
    btn.className = 'action-card games-card';
    btn.innerHTML = `<div class="action-icon">üéÆ</div><h3>‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</h3><p>‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç</p>`;
    btn.addEventListener('click', () => {
      if (window.App?.openGame) window.App.openGame();
      else location.href = '/pages/game.html';
    });
    grid.prepend(btn);
  }

  /* ---------------- Boot ---------------- */
  document.addEventListener('DOMContentLoaded', async () => {
    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    if (!store.get(KEYS.uid)) store.set(KEYS.uid, 'guest');
    if (!store.get(KEYS.name)) store.set(KEYS.name, '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô');

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå coins ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ledger ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤ ledger
    const legacy = toInt(store.get(KEYS.coins, 0));
    if (legacy && economy._ledger(economy.uid()).length === 0){
      await economy.add(legacy, 'migrate:legacy');
    }

    headerUI.init();
    ensurePlayGameCard();

    // ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå base ‡πÄ‡∏™‡∏°‡∏≠
    avatar.ensureOwnBase();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á)
    const cur = avatar.current();
    if (!cur || !cur.asset){
      avatar.setCurrent({ id: AVATAR_DEFAULTS[0].id, asset: AVATAR_DEFAULTS[0].asset });
    }

    // ‡∏ß‡∏≤‡∏î‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå
    avatar.render();
  });

  /* ---------------- Public API ---------------- */
  window.App = Object.assign(window.App || {}, {
    economy,
    avatar,
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "‡∏£‡πâ‡∏≤‡∏ô": ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏ß‡∏≤‡∏ï‡∏≤‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà
    // await App.avatar.buyAndEquip({id:'elderly_male_base', asset:'/assets/...png', price:0})
  });
})();
